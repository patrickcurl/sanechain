{"version":3,"file":"enum.js","sourceRoot":"","sources":["enum.ts"],"names":[],"mappings":"","sourcesContent":["import { ITSReadonlyRecord } from './readonly';\nimport { ITSTypeAndStringLiteral } from '../../helper/string';\n\nexport type ITSEnumLike<K extends string = string, V extends string | number = string | number> = ITSReadonlyRecord<K, V> | (V extends number ? ITSNumberEnumLikeReverse<K, Exclude<V, string>> : ITSEnumLikeReverseExcludeNumber);\n\nexport type ITSStringEnumLike<K extends string = string, V extends string = string> = (ITSReadonlyRecord<K, V> | ITSStringEnumLikeReverse<K, V>) & ITSEnumLikeReverseExcludeNumber;\n\nexport type ITSNumberEnumLike<K extends string = string, V extends number = number> = ITSReadonlyRecord<K, V> | ITSNumberEnumLikeReverse<K, V>;\n\n/**\n * @internal\n */\nexport type ITSStringEnumLikeReverse<K extends string = string, V extends string = string> =\n\tITSReadonlyRecord<V, K>;\n\n/**\n * @internal\n * @see https://github.com/microsoft/TypeScript/issues/51105\n */\nexport type ITSNumberEnumLikeReverse<K extends string = string, V extends number = number> = ITSReadonlyRecord<Exclude<ITSTypeAndStringLiteral<V>, K>, K>;\n\n/**\n * @internal\n */\nexport type ITSEnumLikeReverseExcludeNumber = ITSReadonlyRecord<number, void | never>;\n"]}