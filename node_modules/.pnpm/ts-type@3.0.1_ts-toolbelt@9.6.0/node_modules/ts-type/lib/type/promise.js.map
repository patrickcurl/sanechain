{"version":3,"file":"promise.js","sourceRoot":"","sources":["promise.ts"],"names":[],"mappings":";AAAA;;GAEG","sourcesContent":["/**\n * Created by user on 2019/6/11.\n */\n\n/**\n * Same property names, but make the value a promise instead of a concrete one\n * @see https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-1.html\n */\nexport type ITSDeferred<T> = {\n\t[P in keyof T]: Promise<T[P]>;\n};\n\nexport interface ITSPromiseFulfilledResult<T>\n{\n\tstatus: \"fulfilled\";\n\tvalue: T;\n\treason?: never;\n}\n\nexport interface ITSPromiseRejectedResult<E = any>\n{\n\tstatus: \"rejected\";\n\treason: E;\n\tvalue?: never;\n}\n\nexport type ITSPromiseSettledResult<T, E = any> = ITSPromiseFulfilledResult<T> | ITSPromiseRejectedResult<E>;\n"]}