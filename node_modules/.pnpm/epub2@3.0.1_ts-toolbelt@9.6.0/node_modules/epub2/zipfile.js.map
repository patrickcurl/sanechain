{"version":3,"file":"zipfile.js","sourceRoot":"","sources":["zipfile.ts"],"names":[],"mappings":";AAAA;;GAEG;;;AAYH,IACA;IACC,qCAAqC;IACrC,eAAO,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC;CACrC;AACD,OAAO,GAAG,EACV;IACC,sCAAsC;IACtC,MAAM,MAAM,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;IAElC,aAAa;IACb,eAAO,GAAG,CAAC;QAKV,YAAY,QAAgB;YAE3B,IAAI,CAAC,MAAM,GAAG,IAAI,MAAM,CAAC,QAAQ,CAAC,CAAC;YACnC,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,GAAG,CAAC,UAAU,QAAQ;gBAE3D,OAAO,QAAQ,CAAC,SAAS,CAAC;YAC3B,CAAC,CAAC,CAAC;QACJ,CAAC;QAEM,QAAQ,CAAC,IAAY,EAAE,EAA2B;YAExD,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE;gBAEvE,IAAI,KAAK,IAAI,CAAC,MAAM,EACpB;oBACC,IAAI,GAAG,kBAAkB,CAAC,IAAI,CAAC,CAAC;oBAEhC,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE,CAAC,MAAM,EAAE,KAAK,EAAE,EAAE,CAAC,EAAE,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC;iBAC5F;qBAED;oBACC,EAAE,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;iBAClB;YACF,CAAC,CAAC,CAAC;QACJ,CAAC;QAED,IAAW,KAAK;YAEf,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC;QAC1B,CAAC;KACD,CAAC,CAAC;CACH;AAED,kBAAe,eAAO,CAAC","sourcesContent":["/**\n * Created by user on 2018/2/1/001.\n */\n\nexport let ZipFile: IZipFile;\n\nexport interface IZipFile\n{\n\tnames: string[];\n\tcount: number;\n\tconstructor(filename: string);\n\treadFile(name: string, cb: (error, buffer: Buffer) => void): void;\n}\n\ntry\n{\n\t// zipfile is an optional dependency:\n\tZipFile = require(\"zipfile\").ZipFile;\n}\ncatch (err)\n{\n\t// Mock zipfile using pure-JS adm-zip:\n\tconst AdmZip = require('adm-zip');\n\n\t// @ts-ignore\n\tZipFile = (class\n\t{\n\t\tprotected admZip;\n\t\tpublic names: string[];\n\n\t\tconstructor(filename: string)\n\t\t{\n\t\t\tthis.admZip = new AdmZip(filename);\n\t\t\tthis.names = this.admZip.getEntries().map(function (zipEntry)\n\t\t\t{\n\t\t\t\treturn zipEntry.entryName;\n\t\t\t});\n\t\t}\n\n\t\tpublic readFile(name: string, cb: (error, buffer) => void)\n\t\t{\n\t\t\tthis.admZip.readFileAsync(this.admZip.getEntry(name), (buffer, error) =>\n\t\t\t{\n\t\t\t\tif (error || !buffer)\n\t\t\t\t{\n\t\t\t\t\tname = decodeURIComponent(name);\n\n\t\t\t\t\tthis.admZip.readFileAsync(this.admZip.getEntry(name), (buffer, error) => cb(error, buffer));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tcb(error, buffer);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\tpublic get count(): number\n\t\t{\n\t\t\treturn this.names.length;\n\t\t}\n\t});\n}\n\nexport default ZipFile;\n"]}