{"version":3,"file":"index.umd.development.cjs","sources":["../src/index.ts"],"sourcesContent":["import { ITSAndTypeAndStringLiteral, ITSTypeAndStringLiteral } from 'ts-type/lib/helper/string';\n\nexport const enum EnumLineBreak\n{\n\tCR = \"\\r\",\n\tCRLF = \"\\r\\n\",\n\tLF = \"\\n\",\n}\n\nexport const enum EnumLineBreakCharCode\n{\n\tCR = 0x0d,\n\tLF = 0x0a,\n}\n\nconst CR = EnumLineBreak.CR as const;\nconst CRLF = EnumLineBreak.CRLF as const;\nconst LF = EnumLineBreak.LF as const;\n\nconst R_CRLF = /\\r\\n|\\r(?!\\n)|\\n/g;\nconst R_CRLF_MATCH = new RegExp(`(${R_CRLF.source})`, R_CRLF.flags);\n\nexport { CR, CRLF, LF, R_CRLF, R_CRLF_MATCH }\n\nexport type ILineBreak = ITSTypeAndStringLiteral<EnumLineBreak>;\n\nexport type ILineBreakInput = ITSAndTypeAndStringLiteral<EnumLineBreak>;\n\nexport interface IOptions\n{\n\tdisable?: {\n\t\tlf?: boolean,\n\t\tcrlf?: boolean,\n\t\tcr?: boolean,\n\t}\n}\n\nexport function crlf(text: string, newline: ILineBreakInput = EnumLineBreak.LF): string\n{\n\treturn text.replace(R_CRLF, newline);\n}\n\nexport function chkcrlf(text: string, options?: IOptions)\n{\n\tconst disable = options?.disable ?? {};\n\n\treturn {\n\t\tlf: !disable.lf && /\\n/.test(text.replace(/\\r\\n/g, '')),\n\t\tcrlf: !disable.crlf && /\\r\\n/.test(text),\n\t\tcr: !disable.cr && /\\r(?!\\n)/.test(text),\n\t} as const;\n}\n\nexport type IChkCrlf = ReturnType<typeof chkcrlf>;\n\nexport function detectLineBreak(text: string, options?: IOptions)\n{\n\tconst _lb = chkcrlf(text, options);\n\treturn _detectLineBreakCore(_lb)\n}\n\nexport function _detectLineBreakCore(_lb: IChkCrlf)\n{\n\treturn _lb.crlf ? EnumLineBreak.CRLF : (_lb.lf || !_lb.cr) ? EnumLineBreak.LF : EnumLineBreak.CR\n}\n\nexport function isCRLF(newline: string): newline is EnumLineBreak.CRLF\n{\n\treturn newline === EnumLineBreak.CRLF\n}\n\nexport function isLF(newline: string): newline is EnumLineBreak.LF\n{\n\treturn newline === EnumLineBreak.LF\n}\n\nexport function isCR(newline: string): newline is EnumLineBreak.CR\n{\n\treturn newline === EnumLineBreak.CR\n}\n\nexport function charCodeIsLF(charCode: number): charCode is EnumLineBreakCharCode.LF\n{\n\treturn charCode === EnumLineBreakCharCode.LF\n}\n\nexport function charCodeIsCR(charCode: number): charCode is EnumLineBreakCharCode.CR\n{\n\treturn charCode === EnumLineBreakCharCode.CR\n}\n\nexport function lineSplit(text: string)\n{\n\treturn text.split(R_CRLF);\n}\n\nexport function crlf_unicode_normalize(text: string, newline: ILineBreakInput = EnumLineBreak.LF): string\n{\n\tconst ln3 = newline + newline + newline;\n\tconst ln2 = newline + newline;\n\n\treturn text\n\t\t.replace(/\\u000C/g, ln3)\n\t\t.replace(/\\u2028/g, newline)\n\t\t.replace(/\\u2029/g, ln2)\n\t\t;\n}\n\nexport function isEqualWithIgnoreLineSeparators(a: string, b: string)\n{\n\tconst _lb_a: IChkCrlf = chkcrlf(a);\n\tconst _lb_b: IChkCrlf = chkcrlf(b);\n\n\tlet bool = false;\n\n\tif (_lb_a.cr === _lb_b.cr && _lb_a.crlf === _lb_b.crlf && _lb_a.lf === _lb_b.lf)\n\t{\n\t\tbool = crlf(a) === crlf(b);\n\t}\n\n\treturn {\n\t\tbool,\n\t\t_lb_a,\n\t\t_lb_b,\n\t}\n}\n\nexport type ILineBreakName = keyof typeof EnumLineBreak;\n\nexport function toLineBreakName(newline: ILineBreakInput): ILineBreakName\n{\n\tswitch (newline)\n\t{\n\t\tcase EnumLineBreak.LF:\n\t\t\treturn 'LF'\n\t\tcase EnumLineBreak.CR:\n\t\t\treturn 'CR'\n\t\tcase EnumLineBreak.CRLF:\n\t\t\treturn 'CRLF'\n\t}\n\n\tthrow new TypeError(`Invalid line break`);\n}\n\nexport function nameToLineBreak(name: ILineBreakName | Lowercase<ILineBreakName> | Capitalize<Lowercase<ILineBreakName>> | string): EnumLineBreak\n{\n\tswitch (name?.toUpperCase())\n\t{\n\t\tcase 'LF':\n\t\t\treturn EnumLineBreak.LF\n\t\tcase 'CR':\n\t\t\treturn EnumLineBreak.CR\n\t\tcase 'CRLF':\n\t\t\treturn EnumLineBreak.CRLF\n\t}\n\n\tthrow new TypeError(`Invalid line break name: ${name}`);\n}\n\nexport function detectCurrentIndexLineBreakFromBufferLike<T extends number, A extends {\n\t[n: number]: number\n}>(buffer: A, index: T)\n{\n\tconst cur = buffer[index];\n\tconst next = index + 1;\n\tif (charCodeIsLF(cur))\n\t{\n\t\treturn {\n\t\t\tnewline: EnumLineBreak.LF as const,\n\t\t\tcur: cur as EnumLineBreakCharCode.LF,\n\t\t\tindex,\n\t\t\tnext,\n\t\t\tlength: 1 as const,\n\t\t} as const\n\t}\n\telse if (charCodeIsCR(cur))\n\t{\n\t\tif (charCodeIsLF(buffer[next]))\n\t\t{\n\t\t\treturn {\n\t\t\t\tnewline: EnumLineBreak.CRLF as const,\n\t\t\t\tcur: cur as EnumLineBreakCharCode.CR,\n\t\t\t\tindex,\n\t\t\t\tnext: next + 1,\n\t\t\t\tlength: 2 as const,\n\t\t\t} as const\n\t\t}\n\n\t\treturn {\n\t\t\tnewline: EnumLineBreak.CR as const,\n\t\t\tcur: cur as EnumLineBreakCharCode.CR,\n\t\t\tindex,\n\t\t\tnext,\n\t\t\tlength: 1 as const,\n\t\t} as const\n\t}\n\n\treturn {\n\t\tnewline: void 0 as undefined,\n\t\tcur,\n\t\tindex,\n\t\tnext,\n\t\tlength: 0 as const,\n\t} as const\n}\n\nexport function detectCurrentIndexLineBreak<T extends number, A extends {\n\t[n: number]: string\n}>(buffer: A, index: T)\n{\n\tconst cur = buffer[index];\n\tconst next = index + 1;\n\tif (isLF(cur))\n\t{\n\t\treturn {\n\t\t\tnewline: EnumLineBreak.LF as const,\n\t\t\tcur: cur as EnumLineBreak.LF,\n\t\t\tindex,\n\t\t\tnext,\n\t\t\tlength: 1 as const,\n\t\t} as const\n\t}\n\telse if (isCR(cur))\n\t{\n\t\tif (isLF(buffer[next]))\n\t\t{\n\t\t\treturn {\n\t\t\t\tnewline: EnumLineBreak.CRLF as const,\n\t\t\t\tcur: cur as EnumLineBreak.CR,\n\t\t\t\tindex,\n\t\t\t\tnext: next + 1,\n\t\t\t\tlength: 2 as const,\n\t\t\t} as const\n\t\t}\n\n\t\treturn {\n\t\t\tnewline: EnumLineBreak.CR as const,\n\t\t\tcur: cur as EnumLineBreak.CR,\n\t\t\tindex,\n\t\t\tnext,\n\t\t\tlength: 1 as const,\n\t\t} as const\n\t}\n\n\treturn {\n\t\tnewline: void 0 as void,\n\t\tcur,\n\t\tindex,\n\t\tnext,\n\t\tlength: 0 as const,\n\t} as const\n}\n\nexport default crlf;\n"],"names":["EnumLineBreak","EnumLineBreakCharCode","CR","CRLF","LF","R_CRLF","R_CRLF_MATCH","RegExp","source","flags","crlf","text","newline","replace","chkcrlf","options","disable","lf","test","cr","detectLineBreak","_lb","_detectLineBreakCore","isCRLF","isLF","isCR","charCodeIsLF","charCode","charCodeIsCR","lineSplit","split","crlf_unicode_normalize","ln3","ln2","isEqualWithIgnoreLineSeparators","a","b","_lb_a","_lb_b","bool","toLineBreakName","TypeError","nameToLineBreak","name","toUpperCase","detectCurrentIndexLineBreakFromBufferLike","buffer","index","cur","next","length","detectCurrentIndexLineBreak"],"mappings":"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"}